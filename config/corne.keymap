/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LWR 1
#define RSE 2

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };

        extra_layer {
            bindings = <&sl 4>;
            key-positions = <16 15>;
        };
    };

    macros {
        open_vscode: op_vscode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp I &kp S &kp U &kp A &kp L &kp SPACE &kp S &kp T &kp U &kp D &kp I &kp O &kp SPACE &kp C &kp O &kp D &kp E>;
            label = "OP_VSCODE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | CTRL  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LSHFT  &kp A  &kp S  &kp D         &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RCTRL
                         &mt LGUI ESC  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  ~ |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | SHFT | BSPC | OPL | OPR | NTL | NTR |   | LFT | DWN |  UP | RGT |     | SHFT |
            // | SRCH |     |     | รง |  NSL | NSR  |   |     |     |     |     |     |  LANG |
            //                    | GUI |     | SPC |   | ENT |  ADJ  | GUI |

            bindings = <
&kp TILDE      &kp N1    &kp N2        &kp N3         &kp N4            &kp N5              &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&kp LSHFT      &kp BSPC  &kp LA(LEFT)  &kp LA(RIGHT)  &kp LG(LS(LBRC))  &kp LG(LS(RBRC))    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &kp RSHFT
&kp LG(SPACE)  &trans    &trans        &kp LA(C)      &kp LC(LEFT)      &kp LC(RIGHT)       &trans    &trans    &trans    &trans     &trans  &kp LC(RA(SPACE))
                                       &kp LGUI       &trans            &kp SPACE           &kp RET   &trans    &kp LGUI
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  ` |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | SHFT |   F1  |  F2   |  F3   |  F4   |  F5   |   |  -  |  =  |  {  |  }  | "|" |  `   |
            // | CTRL |     |     |     |     |     |   |  _  |  +  |  [  |  ]  | "\" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LSHFT  &kp F1    &kp F2  &kp F3    &kp F4    &kp F5       &kp MINUS  &kp EQUAL  &kp LBRC   &kp RBRC  &kp PIPE  &kp GRAVE
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBKT   &kp RBKT  &kp BSLH  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        adj_layer {
            // -----------------------------------------------------------------------------------------
            // |      |     |     |     |     |     |   |     |     |     |     |     |      |
            // |BTCLR | BT1 | BT2 | BT3 |     |     |   | VOLU|     |     |     |     |      |
            // |BTCLA |     |     |     |     |     |   | VOLD|     |     |     |     |      |
            //                    |     |     |     |   |     |     |     |

            bindings = <
&trans          &trans        &trans        &trans        &trans        &trans    &trans        &trans  &trans  &trans  &trans  &trans
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans    &kp C_VOL_UP  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans    &kp C_VOL_DN  &trans  &trans  &trans  &trans  &trans
                                            &trans        &trans        &trans    &trans        &trans  &trans
            >;
        };

        extra {
            bindings = <
&trans  &trans          &trans                &trans                &trans                &kp LC(LA(NUMBER_2))    &trans  &trans                &trans  &trans  &kp LC(LA(NUMBER_6))  &trans
&trans  &kp LC(LA(N7))  &kp LC(LA(NUMBER_5))  &trans                &trans                &trans                  &trans  &trans                &trans  &trans  &trans                &trans
&trans  &trans          &trans                &kp LC(LA(NUMBER_4))  &kp LC(LA(NUMBER_1))  &trans                  &trans  &kp LC(LA(NUMBER_3))  &trans  &trans  &trans                &trans
                                              &trans                &trans                &trans                  &trans  &trans                &trans
            >;
        };
    };
};
