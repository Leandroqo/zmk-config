/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LWR 1
#define RSE 2

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | CTRL  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LSHFT &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RCTRL
                  &mt LGUI ESC &mo LWR &kp SPACE   &kp RET &mo RSE &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ~ |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | SHFT | BSPC | OPL | OPR | NTL | NTR |   | LFT | DWN |  UP | RGT |     | SHFT |
// | CTRL |     |     |     |  NSL | NSR  |   |     |     |     |     |     |  LANG |
//                    | GUI |     | SPC |   | ENT |  ADJ  | GUI |
                        bindings = <
   &kp TILDE    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &kp LSHFT &kp BSPC &kp LA(LEFT) &kp LA(RIGHT) &kp LG(LS(LBRC)) &kp LG(LS(RBRC))   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &kp RSHFT
   &kp LCTRL   &trans       &trans       &trans       &kp LC(LEFT)       &kp LC(RIGHT)         &trans   &trans   &trans &trans    &trans &kp LC(RA(SPACE))
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp LGUI
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  ` |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | SHFT |   F1  |  F2   |  F3   |  F4   |  F5   |   |  -  |  =  |  [  |  ]  | "|" |  `   |
// | CTRL |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "\" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  GRAVE  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LSHFT &kp F1   &kp F2 &kp F3   &kp F4   &kp F5      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp PIPE &kp GRAVE
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp BSLH &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };

                adj_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     |      |
// |BTCLR | BT1 | BT2 | BT3 |     |     |   | VOLU|     |     |     |     |      |
// |BTCLA |     |     |     |     |     |   | VOLD|     |     |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans          &trans       &trans       &trans       &trans        &trans      &trans       &trans  &trans  &trans &trans &trans
   &bt BT_CLR      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &trans      &kp C_VOL_UP &trans  &trans  &trans &trans &trans
   &bt BT_CLR_ALL  &trans       &trans       &trans       &trans        &trans      &kp C_VOL_DN &trans  &trans  &trans &trans &trans
                                                      &trans   &trans   &trans      &trans   &trans    &trans
                        >;
                };
};